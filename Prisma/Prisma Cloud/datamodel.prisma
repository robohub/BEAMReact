enum AttributeType {
  String
  Int
  Float
  DateTime
  Boolean
}

enum WidgetType {
  Text
  Plan
  HTML
  Diagram
  Navigation
  Tree
}

type BizAttribute {
  businessObject: BusinessObject @relation(name: "BOBizAttribute")
  createdAt: DateTime!
  id: ID! @unique
  metaAttribute: MetaAttribute @relation(name: "BizAttributeOnMetaAttribute")
  updatedAt: DateTime!
  value: String!
}

type BizRelation {
  createdAt: DateTime!
  id: ID! @unique
  incomingObject: BusinessObject @relation(name: "BOOutgoingBizRelation")
  metaRelation: MetaRelation @relation(name: "BizRelationOnMetaRelation",)
  oppositeObject: BusinessObject @relation(name: "BOInComingBizRelation")
  oppositeRelation: BizRelation @relation(name: "BizRelationOnBizRelation", link: INLINE)
  updatedAt: DateTime!
}

type BusinessObject {
  bizAttributes: [BizAttribute!]! @relation(name: "BOBizAttribute", link: INLINE, onDelete: CASCADE)
  createdAt: DateTime!
  id: ID! @unique
  incomingRelations: [BizRelation!]! @relation(name: "BOInComingBizRelation", link: INLINE, onDelete: CASCADE)
  metaObject: MetaObject @relation(name: "BusinessObjectOnMetaObject")
  name: String
  outgoingRelations: [BizRelation!]! @relation(name: "BOOutgoingBizRelation", link: INLINE, onDelete: CASCADE)
  state: String
  tags: [String!]
  updatedAt: DateTime!
  plan: Plan @relation(name: "PlanBizObject", link: INLINE)
  plannedIn: Plan @relation(name: "ItemBOsBizObject")
}

type File {
  contentType: String!
  createdAt: DateTime!
  id: ID! @unique
  name: String!
  secret: String! @unique
  size: Int!
  updatedAt: DateTime!
  url: String! @unique
}

type MetaAttribute {
  bizAttributes: [BizAttribute!]! @relation(name: "BizAttributeOnMetaAttribute", link: INLINE)
  createdAt: DateTime!
  id: ID! @unique
  name: String @unique
  objects: [MetaObject!]! @relation(name: "AttributeOnObject")
  type: AttributeType
  updatedAt: DateTime!
}

type MetaObject {
  attributes: [MetaAttribute!]! @relation(name: "AttributeOnObject", link: INLINE)
  businessObjects: [BusinessObject!]! @relation(name: "BusinessObjectOnMetaObject", link: INLINE, onDelete: CASCADE)
  createdAt: DateTime!
  id: ID! @unique
  incomingRelations: [MetaRelation!]! @relation(name: "MetaRelationOnMetaObject", link: INLINE, onDelete: CASCADE)
  name: String!
  outgoingRelations: [MetaRelation!]! @relation(name: "MetaObjectOnMetaRelation", link: INLINE, onDelete: CASCADE)
  updatedAt: DateTime!
  planConfig: PlanConfig @relation(name: "UIMOPlanMetaObject")
  templateConfig: TemplateConfig @relation(name: "TemplateConfigMetaObject")
}

type MetaRelation {
  bizRelations: [BizRelation!]! @relation(name: "BizRelationOnMetaRelation", link: INLINE)
  createdAt: DateTime!
  id: ID! @unique
  incomingObject: MetaObject @relation(name: "MetaObjectOnMetaRelation")
  multiplicity: MultiplicityType!
  oppositeName: String!
  oppositeObject: MetaObject @relation(name: "MetaRelationOnMetaObject")
  oppositeRelation: MetaRelation @relation(name: "MetaRelationOnMetaRelation", link: INLINE)
  updatedAt: DateTime!
}

enum MultiplicityType {
  One
  Many
}

type SMTransition {
  createdAt: DateTime!
  event: String!
  from: String!
  id: ID! @unique
  stateMachineSchema: StateMachineSchema @relation(name: "StateMachineSchemaOnSMTransition")
  to: String!
  updatedAt: DateTime!
}

type StateMachineSchema {
  createdAt: DateTime!
  finalState: String!
  id: ID! @unique
  initialState: String!
  name: String! @unique
  sMTransitions: [SMTransition!]! @relation(name: "StateMachineSchemaOnSMTransition", link: INLINE)
  updatedAt: DateTime!
}

type PlanConfig {
  id: ID! @unique
  uiMoPlan: MetaObject @relation(name: "UIMOPlanMetaObject", link: INLINE)
  uiMoRelations: [MetaRelation] @relation(name: "UIMORelationMetaRelations", link: INLINE)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Plan {
  id: ID! @unique
  planData: Json
  planBO: BusinessObject @relation(name: "PlanBizObject")
  createdAt: DateTime!
  updatedAt: DateTime!
  itemBOs: [BusinessObject] @relation(name: "ItemBOsBizObject")
}

type TemplateConfig {
  id: ID! @unique
  moObject: MetaObject @relation(name: "TemplateConfigMetaObject", link: INLINE) @default(value: [])
  moRelation: MetaRelation @relation(name: "TemplateConfigMetaRelation", link: INLINE) @default(value: [])
  userRelatedMRId : String
  defaultTemplate: Template @relation(name: "TemplateConfigTemplate", link: INLINE) @default(value: [])
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TemplateMapping {
  id: ID! @unique
  template: Template @relation(name: "TemplateMappingTemplate", link: INLINE)
  businessObject: BusinessObject @relation(name: "TemplateMappingBO", link: INLINE)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Template {
  id: ID! @unique
  name: String! @default(value: "")
  renderColumns: [RenderColumn] @relation(name: "TemplateRenderColumn", onDelete: CASCADE) @default(value: [])
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RenderColumn {
  id: ID! @unique
  widgets: [Widget]  @relation(name: "RenderColumnWidget", onDelete: CASCADE)
  width: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Widget {
  id: ID! @unique
  name: String
  type: WidgetType!
  width: Int
  boid: String
  text: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SystemSetup {
  id: ID! @unique
  systemUserMOMapping: MetaObject @default(value: [])
  systemUseridMAMapping: MetaAttribute @default(value: [])
  templateConfig: TemplateConfig @default(value: [])
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID! @unique
  userid: String @unique @default(value: "")
  password: String @default(value: "")
  name: String @unique @default(value: "")
  createdAt: DateTime!
  updatedAt: DateTime!
}